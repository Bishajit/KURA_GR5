version: 2.1
orbs:
  terraform: circleci/terraform@3.0.0
  aws-ecr: circleci/aws-ecr@0.0.4
  slack: circleci/slack@4.6.0

#circleci run and push image to ecr then 
#deploy infra run to build the infra and ecs
#connect ecs to ecr to create the task or run infra first but how does ecs wait for image to be put in ecr
#slack orb is used to integrate circleci with slack, so we can be notified of deployment fails/passes

workflows:
  deploy_infra:
    jobs:
    - terraform/validate:
        checkout: true
        context: terraform
    - terraform/plan:
        checkout: true
        context: terraform
        persist-workspace: true
        requires:
        - terraform/validate
    - terraform/apply:
        attach-workspace: true
        context: terraform
        filters:
          branches:
            only: main
        requires:
        - terraform/plan
  build_test_deploy:
    jobs:
      - build_test:
          context: ei-circleci-alerts
      - docker_hub_build_push_image:
          requires:
            - build_test
      - aws-ecr/build_and_push_image:
          context: ei-circleci-alerts
          region: ${AWS_DEFAULT_REGION}
          account-url: ${AWS_ECR_ACCOUNT_URL}
          repo: circleci
          tag: image-${CIRCLE_BUILD_NUM}
          requires:
            - build_test
      


jobs:
  build_test:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: |
            cd backend/
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV && source $BASH_ENV
            pip install --user -r requirements.txt
      - run:
          name: Run unit tests
          command: |
            pytest --junitxml=test-reports/junit.xml --html=test-reports/pytest_report.html --self-contained-html
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: basic_success_1
                           
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  docker_hub_build_push_image:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build and push Docker image to Docker Hub
          command: |
            echo 'export TAG=image-${CIRCLE_BUILD_NUM}' >> ${BASH_ENV}
            echo 'export IMAGE_NAME=${CIRCLE_PROJECT_REPONAME}' >> ${BASH_ENV}
            source ${BASH_ENV}
            docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME} -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${TAG} .
            echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1


  


          



           

          


